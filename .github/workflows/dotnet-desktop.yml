# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: multisqlrun CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
        dotnet: ['8.0.100']

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: multirun.sln                               # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: appui.tests\appui.tests.csproj         # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
    
    steps:

    # - name: preparation
    #   run: |
    #     echo "::set-env name=BUILD_VER::2.3.$GITHUB_RUN_NUMBER"
    #     echo "::set-env name=CONFIG::Release"
    #     echo "::set-env name=NUGET_URL::https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
    #     # echo "::set-env name=SLN::multirun.sln"
    #     # echo "::set-env name=TEST::true"

    - name: checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ matrix.dotnet }}

    - name: register github registry
      run:
        dotnet nuget add source --username fkostya \
            --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text \
            --name github "https://nuget.pkg.github.com/fkostya/index.json"
    
    - name: restore dependencies
      env:
        GITHUB_PACKAGE_USER_NAME: ${{ secrets.RESTORE_ORGANIZATION_PACKAGES_EMAIL }}
        GITHUB_PACKAGE_TOKEN: ${{ secrets.RESTORE_ORGANIZATION_PACKAGES }}
      run: dotnet restore

    - name: build
      run: |
        dotnet build --configuration Release --no-restore
        dotnet publish -c Release -o ./published
        
    - name: test
      run: dotnet test --no-restore --verbosity normal \
        -p:CollectCoverage=true 
        -p:CoverletOutput=TestResults/ \
        -p:CoverletOutputFormat=opencover

    # Execute code coverage for unit tests results in the solution
    - name: .Net Code Coverage Badge
      uses: simon-k/dotnet-code-coverage-badge@v1.0.0
      id: create_coverage_badge
      with:
        label: Unit Test Coverage
        color: green
        path: appui.tests\TestResults\coverage.opencover.xml
        gist-filename: code-coverage.json
        gist-id: 6139c93439673c361cd0aebd8462e298
        gist-auth-token: ${{ secrets.GIST_AUTH_TOKEN }}

    - name: Print code coverage
      run: echo "Code coverage percentage ${{steps.create_coverage_badge.outputs.percentage}}%"

    - name: cleanup
      if: always()
      continue-on-error: true
      run:
        dotnet nuget remove source github